Memory and Pointers
CSE 220: Systems Programming

Ethan Blanton & Carl Alphonce
Department of Computer Science and Engineering
University at Buffalo

Introduction

Memory Model

Pointers

Exploring Pointers

Summary

References

Effective Questions
Answering questions is easy.
Asking the right question is hard!
For conceptual problems, ask:
What do I have?
What do I need?
Can I figure out how to get from here to there?
What about partway there?
If you need help, tell us (in your words!) what you have and what
you need!

Introduction

Memory Model

Pointers

Exploring Pointers

Summary

References

Memory

Memory on POSIX systems is data storage identified by
address.
All of the data accessible to your C program has an address.¶
The CPU uses this address to retrieve data from memory.


Introduction

Memory Model

Pointers

Exploring Pointers

Summary

References

C/POSIX Memory Model
On a POSIX system, every process appears to have its own
memory.
This memory ranges from address zero to the maximum
allowable address.
It may be the case that not all of it is available, however!
On Unix systems, the usage of that memory is predictable.¶

© 2023 Ethan Blanton & Carl Alphonce / CSE 220: Systems Programming

4

Introduction

Memory Model

Pointers

Exploring Pointers

Summary

References

Pointers
C pointers are variables that hold memory addresses.
This lets your program interact with memory explicitly.
Pointers are very powerful but inherently unsafe tools.
The C compiler doesn’t know which pointers are valid!
Most non-trivial data structures in C use pointers.

Introduction

Memory Model

Pointers

Exploring Pointers

Summary

References

Memory Addresses
On our platform, you can consider memory as a large array.
A pointer is an index into that
array.

264 – 1

If memory starts at address 0, a
pointer with value p is the p’th
byte of that array.
Note that any given byte may
not exist!

0x0

Introduction

Memory Model

Pointers

Exploring Pointers

Summary

References

Pointer Concepts
A pointer:
Is an address
Allows the memory at that address to be manipulated
Associates a type with the manipulated memory
Remember, to the computer, memory is just bits.
Programmers supply the meaning.
The special pointer value NULL represents an invalid address.

Introduction

Memory Model

Pointers

Exploring Pointers

Summary

References

Pointer Syntax — Declaration
A pointer variable is marked with *.
char *str;
str is a variable which stores a pointer to char.

(char * is the idiomatic string type in C.)
A pointer variable may be marked const, in which case the
memory it points to is const.1
const char *str;

It is a good idea to mark pointer variables const if you don’t
intend to modify their contents.
1 There is another type of constant pointer that we won’t talk about now.
Introduction

Memory Model

Pointers

Exploring Pointers

Summary

References

Pointer Types
What is a pointer to char anyway?
An address of a character-size integer.
char *str = "Hello";

This says:
str contains an address
The data at the object stored in str is of type char

Introduction

Memory Model

Pointers

Exploring Pointers

Summary

References

Addresses
Pointer variables must store a valid address to be used.¶
There are limited opportunities to create valid addresses:
Acquire the address of a variable
Request new memory from the system
Create a string or array constant
Calculation from other addresses
Pointers created in other manners probably are not valid.

Introduction

Memory Model

Pointers

Exploring Pointers

Summary

References

Pointer Syntax — Taking Addresses

A pointer may be created from a variable using unary &.
This is sometimes called the address-of operator.
int x = 42;
int * px = &x;

px now stores a pointer to x.
(More on the implications of this later.)

Introduction

Memory Model

Pointers

Exploring Pointers

Summary

References

Dereferencing a Pointer

Dereferencing a pointer is accessing the data it points to.
It can be dereferenced to read or modify that data.
Dereferencing an invalid pointer is undefined behavior.
This will often result in a segmentation fault, but may silently
corrupt memory!

Introduction

Memory Model

Pointers

Exploring Pointers

Summary

References

Pointer Syntax — Dereferencing
A pointer is dereferenced with *, ->, or [].
(More on -> when we get to structures.)

The * notation reads the value at the pointer address.
int * px = &x;
int y = * px ;

The variable px is initialized with a pointer to x, an integer.
The variable y is created as an integer.
y is assigned the value of x by dereferencing px with *.

Introduction

Memory Model

Pointers

Exploring Pointers

Summary

References

Pointer Syntax — Dereferencing
A pointer can also be dereferenced like an array, with [].
y = px[0];

This is exactly the same as y = *px;.
y = px[1];

This treats px like an array, and retrieves the second
element.
We will explore how this works in more detail later.

Introduction

Memory Model

Pointers

Exploring Pointers

Summary

References

Pointers and Arrays
Arrays and pointers are closely related in C.
You can often think of an array variable as a pointer to the first
array element, and a pointer variable as an array.
However, they are not the same.
In both cases, dereferencing with [i] says
…add i times the size of the type of this variable to the base address
(first element of the array or pointer value), then treat the memory at
that location as if it is of the type of this variable.
Introduction

Memory Model

Pointers

Exploring Pointers

Summary

References

Pointers and Arrays
Consider:
char arr [] = " Hello World ";
char * ptr = arr ;

ptr[6]

H el l o W or l d

N
U
L

arr[2]
Introduction

Memory Model

Pointers

Exploring Pointers

Summary

References

Arrays Are Not Pointers
char arr [] = " string ";
char arr2 [] = arr ;

“error: invalid initializer”
char arr [] = " Hello World ";
char * ptr = arr ;

ptr points to arr[0].

Introduction

Memory Model

Pointers

Exploring Pointers

Summary

References

Exploring Pointers

We will explore pointers in a program and the debugger.

Introduction

Memory Model

Pointers

Exploring Pointers

Summary

References

Summary
Memory locations are identified by addresses.
Addresses are integers.
Our system’s memory is like one large array.
POSIX processes appear to have their own dedicated
memory.
Pointers hold addresses and have types.
Pointers and arrays are closely related, but not the same.

Introduction

Memory Model

Pointers

Exploring Pointers

Summary

References

References I
Required Readings
[1]

Brian W. Kernighan and Dennis M. Ritchie. The C Programming Language. Second
Edition. Chapter 5: Intro, 5.1-5.4. Prentice Hall, 1988.

Introduction

Memory Model

Pointers

Exploring Pointers

Summary

References

License
Copyright 2019–2023 Ethan Blanton, All Rights Reserved.
Copyright 2022, 2023 Carl Alphonce, All Rights Reserved.
Copyright 2019 Karthik Dantu, All Rights Reserved.
Reproduction of this material without written consent of the
author is prohibited.
To retrieve a copy of this material, or related materials, see
https://www.cse.buffalo.edu/~eblanton/.

© 2023 Ethan Blanton & Carl Alphonce / CSE 220: Systems Programming